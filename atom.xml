<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邓耀辉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dengyaohui.com/"/>
  <updated>2018-04-19T05:12:09.697Z</updated>
  <id>http://dengyaohui.com/</id>
  
  <author>
    <name>dyh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://dengyaohui.com/2018/04/19/today/"/>
    <id>http://dengyaohui.com/2018/04/19/today/</id>
    <published>2018-04-19T05:11:51.784Z</published>
    <updated>2018-04-19T05:12:09.697Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>– 今天是个好日子</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;– 今天是个好日子&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NodeJS案例</title>
    <link href="http://dengyaohui.com/2018/03/29/NodeJS%E6%A1%88%E4%BE%8B/"/>
    <id>http://dengyaohui.com/2018/03/29/NodeJS案例/</id>
    <published>2018-03-29T06:07:56.000Z</published>
    <updated>2018-03-29T06:08:10.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="41期-Node-js-综合案例"><a href="#41期-Node-js-综合案例" class="headerlink" title="41期 Node.js 综合案例"></a>41期 Node.js 综合案例</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>创建 github 仓库</li><li>克隆到本地</li><li>创建 <code>.gitignore</code>，并配置忽略 <code>node_modules</code> 目录</li><li>npm init -y</li><li>npm i express</li></ol><h2 id="创建-app-js-编写一个响应-hello-world-的服务"><a href="#创建-app-js-编写一个响应-hello-world-的服务" class="headerlink" title="创建 app.js 编写一个响应 hello world 的服务"></a>创建 <code>app.js</code> 编写一个响应 <code>hello world</code> 的服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 加载 Express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 1. 调用 express() 得到一个 app</span></span><br><span class="line"><span class="comment">//    类似于 http.createServer()</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 2. 设置请求对应的处理函数</span></span><br><span class="line"><span class="comment">//    当客户端以 GET 方法请求 / 的时候就会调用第二个参数：请求处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3. 监听端口号，启动 Web 服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'app listening on port 3000!'</span>))</span><br></pre></td></tr></table></figure><h2 id="抽取路由模块-router-js"><a href="#抽取路由模块-router-js" class="headerlink" title="抽取路由模块 router.js"></a>抽取路由模块 <code>router.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 加载 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 1. 调用 express.Router() 创建一个路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="comment">// 2. 配置路由规则</span></span><br><span class="line">router.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3. 导出路由对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"><span class="comment">// 4. 在 app.js 中通过 app.use(路由对象) 挂载使之生效</span></span><br></pre></td></tr></table></figure><h2 id="设计路由表"><a href="#设计路由表" class="headerlink" title="设计路由表"></a>设计路由表</h2><table><thead><tr><th>请求方法</th><th>请求路径</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>/</td><td>渲染首页</td></tr><tr><td>GET</td><td>/signin</td><td>渲染登陆页面</td></tr><tr><td>POST</td><td>/signin</td><td>处理登陆请求</td></tr><tr><td>GET</td><td>/signup</td><td>渲染注册页面</td></tr><tr><td>POST</td><td>/signup</td><td>处理注册请求</td></tr><tr><td>POST</td><td>/signout</td><td>处理退出请求</td></tr><tr><td>GET</td><td>/topic/create</td><td>渲染发布话题页面</td></tr><tr><td>POST</td><td>/topic/create</td><td>处理发布请求请求</td></tr><tr><td>GET</td><td>/topic/:topicID</td><td>渲染话题详情页面</td></tr><tr><td>GET</td><td>/topic/:topicID/edit</td><td>渲染编辑话题页面</td></tr><tr><td>POST</td><td>/topic/:topicID/edit</td><td>处理编辑话题请求</td></tr><tr><td>POST</td><td>/topic/:topicID/delete</td><td>处理删除话题请求</td></tr><tr><td>POST</td><td></td><td>发表评论</td></tr><tr><td></td><td></td><td>修改评论</td></tr><tr><td></td><td></td><td>删除评论</td></tr><tr><td></td><td></td><td>个人主页</td></tr><tr><td></td><td></td><td>基本信息</td></tr><tr><td></td><td></td><td>设置</td></tr></tbody></table><h2 id="根据路由表配置路由规则"><a href="#根据路由表配置路由规则" class="headerlink" title="根据路由表配置路由规则"></a>根据路由表配置路由规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首页路由</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, index.showIndex)</span><br><span class="line"><span class="comment">// 用户路由</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/signin'</span>, user.showSignin)</span><br><span class="line">  .post(<span class="string">'/signin'</span>, user.signin)</span><br><span class="line">  .get(<span class="string">'/signup'</span>, user.showSignup)</span><br><span class="line">  .post(<span class="string">'/signup'</span>, user.signup)</span><br><span class="line">  .post(<span class="string">'/signout'</span>, user.signout)</span><br><span class="line"><span class="comment">// 话题相关</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/topic/create'</span>, topic.showCreate)</span><br><span class="line">  .post(<span class="string">'/topic/create'</span>, topic.create)</span><br><span class="line">  .get(<span class="string">'/topic/:topicID'</span>, topic.show)</span><br><span class="line">  .get(<span class="string">'/topic/:topicID/edit'</span>, topic.showEdit)</span><br><span class="line">  .post(<span class="string">'/topic/:topicID/edit'</span>, topic.edit)</span><br><span class="line">  .post(<span class="string">'/topic/:topicID/delete'</span>, topic.delete)</span><br></pre></td></tr></table></figure><h2 id="创建控制器（处理函数）模块"><a href="#创建控制器（处理函数）模块" class="headerlink" title="创建控制器（处理函数）模块"></a>创建控制器（处理函数）模块</h2><ul><li>创建 <code>controllers</code> 目录</li><li>在 <code>controllers</code> 目录中根据业务划分创建处理函数模块</li></ul><p><code>index.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'showIndex'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>user.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">exports.showSignin = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'showSignin'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.signin = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'signin'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.showSignup = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'showSignup'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.signup = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'singup'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.signout = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'signout'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>topic.js</code> 文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">exports.showCreate = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'showCreate'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.create = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'create'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.show = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'show'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.showEdit = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'showEdit'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.edit = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'edit'</span>)</span><br><span class="line">&#125;</span><br><span class="line">exports.delete = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">'delete'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问几个路由规则测试一下。</p><h2 id="拷贝静态资源到项目中"><a href="#拷贝静态资源到项目中" class="headerlink" title="拷贝静态资源到项目中"></a>拷贝静态资源到项目中</h2><p>下载项目需要的静态资源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lipengzhou/itcast-resource.git</span><br></pre></td></tr></table></figure><p>把下面的目录拷贝到项目中：</p><ul><li>public/</li><li>views/</li><li>ithub.sql</li></ul><h2 id="配置模板引擎，渲染发送页面"><a href="#配置模板引擎，渲染发送页面" class="headerlink" title="配置模板引擎，渲染发送页面"></a>配置模板引擎，渲染发送页面</h2><ul><li>配置 <code>art-template</code> 模板引擎</li><li>渲染登陆、注册、首页、创建话题… 页面</li></ul><p>页面渲染出来，发现没有样式。</p><h2 id="公开静态资源、下载第三方包"><a href="#公开静态资源、下载第三方包" class="headerlink" title="公开静态资源、下载第三方包"></a>公开静态资源、下载第三方包</h2><p>下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bootstrap@3.3.7 jquery</span><br></pre></td></tr></table></figure><p>公开：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(<span class="string">'./node_modules/'</span>))</span><br></pre></td></tr></table></figure><p>再测试页面样式。</p><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><h3 id="前端页面处理"><a href="#前端页面处理" class="headerlink" title="前端页面处理"></a>前端页面处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 异步提交表单</span><br><span class="line">// 1. 监听表单的 submit 提交事件</span><br><span class="line">//    设置事件处理函数</span><br><span class="line">// 2. 在事件处理函数中</span><br><span class="line">//    阻止表单默认的提交行为</span><br><span class="line">//    采集表单数据</span><br><span class="line">//    表单验证</span><br><span class="line">//      https://github.com/jquery-validation/jquery-validation</span><br><span class="line">//      自己尝试一下这个 jQuery 表单验证插件</span><br><span class="line">//    发起 ajax 异步请求</span><br><span class="line">//    根据服务端响应结果做交互处理</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#signup_form'</span>).on(<span class="string">'submit'</span>, handleSubmit)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSubmit</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="keyword">var</span> formData = $(<span class="keyword">this</span>).serialize()</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/signup'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    data: formData,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="keyword">switch</span>(data.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">          <span class="built_in">window</span>.location.href = <span class="string">'/'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">window</span>.alert(<span class="string">'邮箱已存在，请更换重试'</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          <span class="built_in">window</span>.alert(<span class="string">'昵称已存在，请更换重试'</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          <span class="built_in">window</span>.alert(<span class="string">'服务器内部错误，请稍后重试'</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断 data 中的数据是否成功，成功则跳转到首页</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端后台处理"><a href="#服务端后台处理" class="headerlink" title="服务端后台处理"></a>服务端后台处理</h3><ol><li>接收处理</li><li>处理请求</li><li>发送响应</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1. 接收获取客户端提交的表单数据</span><br><span class="line">//    配置 body-parser 插件用来解析获取表单 POST 请求体数据</span><br><span class="line">// 2. 数据验证</span><br><span class="line">//    普通数据校验，例如数据有没有，格式是否正确</span><br><span class="line">//    业务数据校验，例如校验用户名是否被占用</span><br><span class="line">//    这里校验邮箱和昵称是否被占用</span><br><span class="line">// 邮箱和昵称都校验没有问题了，可以注册了</span><br><span class="line">// 3. 当数据验证都通过之后，在数据库写入一条新的用户数据</span><br><span class="line">// 4. 注册成功，发送成功响应</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">exports.signup = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 接收获取客户端提交的表单数据</span></span><br><span class="line">  <span class="comment">//    配置 body-parser 插件用来解析获取表单 POST 请求体数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.body</span><br><span class="line">  <span class="comment">// 2. 数据验证</span></span><br><span class="line">  <span class="comment">//    普通数据校验，例如数据有没有，格式是否正确</span></span><br><span class="line">  <span class="comment">//    业务数据校验，例如校验用户名是否被占用</span></span><br><span class="line">  <span class="comment">//    这里校验邮箱和昵称是否被占用</span></span><br><span class="line">  <span class="comment">// 校验邮箱是否被占用</span></span><br><span class="line">  connection.query(</span><br><span class="line">    <span class="string">'SELECT * FROM `users` WHERE `email`=?'</span>, [body.email],</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">          code: <span class="number">500</span>,</span><br><span class="line">          message: err.message <span class="comment">// 把错误对象中的错误消息发送给客户端</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (results[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">          code: <span class="number">1</span>,</span><br><span class="line">          message: <span class="string">'邮箱已被占用了'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 校验昵称是否存在</span></span><br><span class="line">      connection.query(</span><br><span class="line">        <span class="string">'SELECT * FROM `users` WHERE `nickname`=?'</span>,</span><br><span class="line">        [body.nickname],</span><br><span class="line">        (err, results) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">              code: <span class="number">500</span>,</span><br><span class="line">              message: err.message <span class="comment">// 把错误对象中的错误消息发送给客户端</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (results[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">              code: <span class="number">2</span>,</span><br><span class="line">              message: <span class="string">'昵称已被占用'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 邮箱和昵称都校验没有问题了，可以注册了</span></span><br><span class="line">          <span class="comment">// 3. 当数据验证都通过之后，在数据库写入一条新的用户数据</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 添加更新时间</span></span><br><span class="line">          <span class="comment">// moment 是一个专门处理时间的 JavaScript 库，这个库既可以在浏览器使用，也可以在 Node 中使用</span></span><br><span class="line">          <span class="comment">// JavaScript 被称之为全栈式语言</span></span><br><span class="line">          <span class="comment">// moment() 用来获取当前时间</span></span><br><span class="line">          <span class="comment">// format() 方法用来格式化输出</span></span><br><span class="line">          body.createdAt = moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">          <span class="keyword">const</span> sqlStr = <span class="string">'INSERT INTO `users` SET ?'</span></span><br><span class="line">          connection.query(sqlStr, body, (err, results) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">              <span class="comment">// 服务器异常，通知客户端</span></span><br><span class="line">              <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                message: err.message</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注册成功，告诉客户端成功了</span></span><br><span class="line">            res.send(&#123;</span><br><span class="line">              code: <span class="number">200</span>,</span><br><span class="line">              message: <span class="string">'ok'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 用户注册成功之后需要跳转到首页</span></span><br><span class="line">            <span class="comment">// 1. 服务端重定向（只对同步请求有效）</span></span><br><span class="line">            <span class="comment">// res.send('注册成功')</span></span><br><span class="line">            <span class="comment">// 2. 让客户端自己跳</span></span><br><span class="line">            <span class="comment">// res.redirect('/')</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取-db-helper-js-文件模块"><a href="#提取-db-helper-js-文件模块" class="headerlink" title="提取 db-helper.js 文件模块"></a>提取 <code>db-helper.js</code> 文件模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>, <span class="comment">// 要连接的主机名</span></span><br><span class="line">  user: <span class="string">'root'</span>, <span class="comment">// 要连接的数据库的用户名</span></span><br><span class="line">  password: <span class="string">'123456'</span>, <span class="comment">// 数据库密码</span></span><br><span class="line">  database: <span class="string">'ithub'</span> <span class="comment">// 数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = connection</span><br></pre></td></tr></table></figure><h2 id="划分-MVC"><a href="#划分-MVC" class="headerlink" title="划分 MVC"></a>划分 MVC</h2><ol><li>在项目根目录下创建 <code>models</code> 目录</li><li>在 <code>models</code> 目录中分别创建 <code>user.js</code>、<code>topic.js</code>、<code>comment.js</code> 等文件</li><li>把所有的数据库操作都封装到 Model 对应的业务模块中</li></ol><p>例如，<code>model/user.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们把用户相关的数据库操作方法都封装到当前模块</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'../controllers/db-helper'</span>)</span><br><span class="line">exports.findAll = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'SELECT * FROM `users`'</span></span><br><span class="line">  db.query(sqlStr, (err, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    callback(<span class="literal">null</span>, results)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">exports.getByEmail = <span class="function">(<span class="params">email, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'SELECT * FROM `users` WHERE `email`=?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    [email],</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">exports.getByNickname = <span class="function">(<span class="params">nickname, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'SELECT * FROM `users` WHERE `nickname`=?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    [nickname],</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">exports.create = <span class="function">(<span class="params">user, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'INSERT INTO `users` SET ?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    user,</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登陆（客户端处理）"><a href="#用户登陆（客户端处理）" class="headerlink" title="用户登陆（客户端处理）"></a>用户登陆（客户端处理）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#signin_form'</span>).on(<span class="string">'submit'</span>, handleSubmit)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSubmit</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="keyword">var</span> formData = $(<span class="keyword">this</span>).serialize()</span><br><span class="line">  $.post(<span class="string">'/signin'</span>, formData, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(data.code) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">'/'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'用户名不存在'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'密码不正确'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登陆（没有存储登陆状态）"><a href="#用户登陆（没有存储登陆状态）" class="headerlink" title="用户登陆（没有存储登陆状态）"></a>用户登陆（没有存储登陆状态）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">exports.signin = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = req.body</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 基本数据校验</span></span><br><span class="line">  User.getByEmail(body.email, (err, user) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">        code: <span class="number">500</span>,</span><br><span class="line">        message: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户不存在，告诉客户端</span></span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        message: <span class="string">'用户不存在'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户存在了，则校验密码</span></span><br><span class="line">    <span class="keyword">if</span> (md5(body.password) !== user.password) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">        code: <span class="number">2</span>,</span><br><span class="line">        message: <span class="string">'密码不正确'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 使用Session保存会话状态</span></span><br><span class="line">    <span class="comment">// 代码执行到这里，就意味着验证通过，可以登陆了</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">      code: <span class="number">200</span>,</span><br><span class="line">      message: <span class="string">'恭喜你，登陆成功'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用户登陆（使用-Session-存储登陆状态）"><a href="#用户登陆（使用-Session-存储登陆状态）" class="headerlink" title="用户登陆（使用 Session 存储登陆状态）"></a>用户登陆（使用 Session 存储登陆状态）</h2><p>express 需要安装配置 <a href="https://github.com/expressjs/session" target="_blank" rel="noopener">express-session</a> 插件才可以使用 Session 功能。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><p>在 <code>app.js</code> 入口模块中配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 配置 session</span></span><br><span class="line"><span class="comment">// 只要配置了该插件，则在后续请求的任何处理函数中都可以使用 req.session 来访问或者设置 Session 数据了</span></span><br><span class="line"><span class="comment">// req.session 就是一个对象，所以：</span></span><br><span class="line"><span class="comment">//    读取 Session 数据：req.session.xxx</span></span><br><span class="line"><span class="comment">//    保存 Session 数据：req.session.xxx = xxx</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>, <span class="comment">// 加密规则私钥，用来保证不同的丰巢快递柜的密码规则都是不一样的，</span></span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span> <span class="comment">// 是否在初始化的时候就给客户端发送一个 Cookie</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>接下来找到 <code>controllers/user.js</code> 文件中，将 <code>sign</code> 方法修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 使用Session保存会话状态</span></span><br><span class="line">req.session.user = user</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="根据用户登陆状态动态展示网页头部内容"><a href="#根据用户登陆状态动态展示网页头部内容" class="headerlink" title="根据用户登陆状态动态展示网页头部内容"></a>根据用户登陆状态动态展示网页头部内容</h2><ul><li>登陆前：显示登陆和注册按钮</li><li>登陆后：显示个人中心和发起按钮</li></ul><p>找到 <code>controllers/index.js</code> 文件，将 <code>showIndex</code> 方法修改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    user: req.session.user <span class="comment">// 把会话用户信息传递到模板中，模板就可以使用当前登陆的用户了</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后找到 <code>views/_incldes/header.html</code> 文件进行条件判定渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果用户已登陆，则显示如下内容块 --&gt;</span></span><br><span class="line">&#123;&#123; if user &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span> <span class="attr">href</span>=<span class="string">"/topic/new"</span>&gt;</span>发起<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"20"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">src</span>=<span class="string">"../public/img/avatar-max-img.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-current-user"</span>&gt;</span></span><br><span class="line">      当前登录用户: &#123;&#123; user.nickname &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个人主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/settings/profile"</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/signout"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123; else &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 如果用户未登录，则显示该内容块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary navbar-btn"</span> <span class="attr">href</span>=<span class="string">"/signin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-success navbar-btn"</span> <span class="attr">href</span>=<span class="string">"/signup"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;&#123; /if &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化存储-Session-数据到-MySQL-数据库"><a href="#持久化存储-Session-数据到-MySQL-数据库" class="headerlink" title="持久化存储 Session 数据到 MySQL 数据库"></a>持久化存储 Session 数据到 MySQL 数据库</h2><p>默认Session是内存存储，服务器一旦重启就会导致Session数据丢失，用户就需要重新登陆。<br>为了解决这个，我们只需要将 Session 数据持久化存储到数据库中就可以了。</p><p>这里我们需要使用一个插件：<a href="https://www.npmjs.com/package/express-mysql-session" target="_blank" rel="noopener">express-mysql-session</a>。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-mysql-session</span><br></pre></td></tr></table></figure><p>在 <code>app.js</code> 中配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"><span class="keyword">const</span> MySQLStore = <span class="built_in">require</span>(<span class="string">'express-mysql-session'</span>)(session)</span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  port: <span class="number">3306</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  database: <span class="string">'ithub'</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> sessionStore = <span class="keyword">new</span> MySQLStore(options)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 配置 Session 插件</span></span><br><span class="line"><span class="comment">// 只要配置了该插件，则在后续请求的任何处理函数中都可以使用 req.session 来访问或者设置 Session 数据了</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  key: <span class="string">'session_cookie_name'</span>,</span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span>,</span><br><span class="line">  store: sessionStore <span class="comment">// 将 Session 数据存储到数据库中（默认是内存存储）</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="用户退出"><a href="#用户退出" class="headerlink" title="用户退出"></a>用户退出</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.signout = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 清除登陆状态</span></span><br><span class="line">  <span class="keyword">delete</span> req.session.user</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. 跳转到登录页</span></span><br><span class="line">  res.redirect(<span class="string">'/signin'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="发布话题"><a href="#发布话题" class="headerlink" title="发布话题"></a>发布话题</h2><ul><li>处理前端页面</li><li>处理服务端</li></ul><h3 id="处理创建话题的客户端"><a href="#处理创建话题的客户端" class="headerlink" title="处理创建话题的客户端"></a>处理创建话题的客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#form'</span>).on(<span class="string">'submit'</span>, handleSubmit)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSubmit</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="keyword">var</span> formData = $(<span class="keyword">this</span>).serialize()</span><br><span class="line">  $.post(<span class="string">'/topic/create'</span>, formData, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写话题数据库操作模块-models-topic-js"><a href="#编写话题数据库操作模块-models-topic-js" class="headerlink" title="编写话题数据库操作模块 models/topic/js"></a>编写话题数据库操作模块 <code>models/topic/js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们把话题相关的数据库操作方法都封装到当前模块</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'../controllers/db-helper'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有话题列表</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> * @return &#123;undefined&#125;            没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.findAll = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'SELECT * FROM `topics`'</span></span><br><span class="line">  db.query(sqlStr, (err, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    callback(<span class="literal">null</span>, results)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件一个话题</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;   topic    话题对象</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; callback 回调函数（返回值都是通过回调函数来接收）</span></span><br><span class="line"><span class="comment"> * @return &#123;undefined&#125;            没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.create = <span class="function">(<span class="params">topic, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'INSERT INTO `topics` SET ?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    topic,</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据话题id更新话题内容</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125;   topic    要更新话题对象</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> * @return &#123;undefined&#125;            没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.updateById = <span class="function">(<span class="params">topic, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'UPDATE `topics` SET `title`=?, `content`=? WHERE `id`=?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    [</span><br><span class="line">      topic.title,</span><br><span class="line">      topic.content,</span><br><span class="line">      topic.id</span><br><span class="line">    ],</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据话题id删除某个话题</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;   id       话题id</span></span><br><span class="line"><span class="comment"> * @param  &#123;Function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> * @return &#123;undefined&#125;            没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.deleteById = <span class="function">(<span class="params">id, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sqlStr = <span class="string">'DELETE FROM `topics` WHERE `id`=?'</span></span><br><span class="line">  db.query(</span><br><span class="line">    sqlStr,</span><br><span class="line">    [</span><br><span class="line">      id</span><br><span class="line">    ],</span><br><span class="line">    (err, results) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, results)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理创建话题服务端"><a href="#处理创建话题服务端" class="headerlink" title="处理创建话题服务端"></a>处理创建话题服务端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">exports.create = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = req.body</span><br><span class="line">  </span><br><span class="line">  body.userId = req.session.user.id <span class="comment">// 话题的作者，就是当前登陆用户</span></span><br><span class="line">  body.createdAt = moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) <span class="comment">// 话题的创建时间</span></span><br><span class="line">  Topic.create(body, (err, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.send(&#123;</span><br><span class="line">        code: <span class="number">500</span>,</span><br><span class="line">        message: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">      code: <span class="number">200</span>,</span><br><span class="line">      message: <span class="string">'创建话题成功了'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="配置全局错误处理中间件"><a href="#配置全局错误处理中间件" class="headerlink" title="配置全局错误处理中间件"></a>配置全局错误处理中间件</h2><p>在 <code>app.js</code> 挂载路由之后添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.use(router)</span><br><span class="line"><span class="comment">// 一个特殊的中间件：错误处理中间件</span></span><br><span class="line"><span class="comment">// 一般一个 Express 应用，配一个就够了</span></span><br><span class="line"><span class="comment">// 作用：全局统一错误处理</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    code: <span class="number">500</span>,</span><br><span class="line">    message: err.message</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置处理-404-页面"><a href="#配置处理-404-页面" class="headerlink" title="配置处理 404 页面"></a>配置处理 404 页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 挂载路由...</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">'404.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用-app-locals-结合中间件挂载公共的模板数据"><a href="#使用-app-locals-结合中间件挂载公共的模板数据" class="headerlink" title="使用 app.locals 结合中间件挂载公共的模板数据"></a>使用 <code>app.locals</code> 结合中间件挂载公共的模板数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面的代码略...</span></span><br><span class="line"><span class="comment">// app 有一个 locals 属性对象</span></span><br><span class="line"><span class="comment">// app.locals 属性对象中的成员可以直接在页面模板中访问</span></span><br><span class="line"><span class="comment">// 我们可以把一些公共的成员，多个页面都需要的模板成员放到 app.locals 中</span></span><br><span class="line"><span class="comment">// 我们每个页面都需要session中的user</span></span><br><span class="line"><span class="comment">// 所以我们就把这个 session 中的 user 添加到 app.locals 中</span></span><br><span class="line"><span class="comment">// 这个中间件的职责就是往 app.locals 中添加公共的模板成员</span></span><br><span class="line"><span class="comment">// 注意：一定要在配置 session 中间件之后，和挂载路由之前</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  app.locals.sessionUser = req.session.user</span><br><span class="line">  <span class="comment">// 千万不要忘记调用 next()，否则请求进来就不往后走了</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 后面的代码略...</span></span><br></pre></td></tr></table></figure><hr><h2 id="演示配置其它第三方中间件"><a href="#演示配置其它第三方中间件" class="headerlink" title="演示配置其它第三方中间件"></a>演示配置其它第三方中间件</h2><ul><li><a href="https://github.com/expressjs/morgan" target="_blank" rel="noopener">morgan</a> 日志中间件</li><li><a href="https://github.com/expressjs/serve-index" target="_blank" rel="noopener">serve-index</a> 处理目录列表中间件</li><li><a href="https://github.com/expressjs/errorhandler" target="_blank" rel="noopener">errorhandler</a> 错误处理中间件</li><li>…</li><li>具体查看官方的中间件资源列表：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></li></ul><hr><h2 id="渲染首页话题列表"><a href="#渲染首页话题列表" class="headerlink" title="渲染首页话题列表"></a>渲染首页话题列表</h2><p><code>controllers/index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取话题列表，渲染首页</span></span><br><span class="line">  Topic.findAll(<span class="function">(<span class="params">err, topics</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">      <span class="comment">// user: req.session.user, // 把会话用户信息传递到模板中，模板就可以使用当前登陆的用户了</span></span><br><span class="line">      topics</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>views/index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list"</span>&gt;</span></span><br><span class="line">&#123;&#123; each topics &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      &lt;a href="/topic/1"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/topic/&#123;&#123; $value.id &#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"40"</span> <span class="attr">height</span>=<span class="string">"40"</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">"../public/img/avatar-max-img.png"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/topic/&#123;&#123; $value.id &#125;&#125;"</span>&gt;</span>&#123;&#123; $value.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sueysok 回复了问题 • 2 人关注 • 1 个回复 • 187 次浏览 • &#123;&#123; $value.createdAt &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123; /each &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查看话题"><a href="#查看话题" class="headerlink" title="查看话题"></a>查看话题</h2><hr><h2 id="删除话题"><a href="#删除话题" class="headerlink" title="删除话题"></a>删除话题</h2><hr><h2 id="编辑话题"><a href="#编辑话题" class="headerlink" title="编辑话题"></a>编辑话题</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;41期-Node-js-综合案例&quot;&gt;&lt;a href=&quot;#41期-Node-js-综合案例&quot; class=&quot;headerlink&quot; title=&quot;41期 Node.js 综合案例&quot;&gt;&lt;/a&gt;41期 Node.js 综合案例&lt;/h1&gt;&lt;h2 id=&quot;准备&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my new post</title>
    <link href="http://dengyaohui.com/2018/03/29/my-new-post/"/>
    <id>http://dengyaohui.com/2018/03/29/my-new-post/</id>
    <published>2018-03-29T06:02:05.000Z</published>
    <updated>2018-03-29T06:03:36.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈哈哈哈"><a href="#哈哈哈哈" class="headerlink" title="哈哈哈哈"></a>哈哈哈哈</h2><pre><code>这是我的第一篇文章</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;哈哈哈哈&quot;&gt;&lt;a href=&quot;#哈哈哈哈&quot; class=&quot;headerlink&quot; title=&quot;哈哈哈哈&quot;&gt;&lt;/a&gt;哈哈哈哈&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;这是我的第一篇文章
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dengyaohui.com/2018/03/29/hello-world/"/>
    <id>http://dengyaohui.com/2018/03/29/hello-world/</id>
    <published>2018-03-29T03:12:17.493Z</published>
    <updated>2018-03-29T03:12:17.493Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
